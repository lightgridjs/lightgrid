.lfg {
  --lfgCellHPadding: 1em;

  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  position: relative;
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  flex: 1;
  border-radius: var(--lfgBorderRadius);
  border: 1px solid var(--lfgBorderColor);
  overflow: hidden;
  color: var(--lfgTextColor);
  background: var(--lfgCellBg, var(--lfgBg));

  // Used in getScrollbarSize else on touch devices it will
  // come back as 0 since they are overlays by default. But
  // as soon as we style the scrollbar to not look terrible
  // it unfortunately means the scrollbar will always be visible
  // and never a nice overlay on phones/laptops.
  &-scroll {
    scrollbar-color: var(--lfgScrollThumb) var(--lfgScrollTrack);

    // Size
    &::-webkit-scrollbar {
      width: 14px;
      height: 14px;
    }

    // Track
    &::-webkit-scrollbar-track {
      background: var(--lfgScrollTrack);
    }
    &::-webkit-scrollbar-corner {
      background: var(--lfgScrollTrack);
    }

    // Handle
    &::-webkit-scrollbar-thumb {
      background: var(--lfgScrollThumb);
      border-radius: 8px;
      border: 3px solid var(--lfgScrollTrack);
    }

    // Handle on hover
    &::-webkit-scrollbar-thumb:hover {
      background: var(--lfgScrollThumbHover);
    }
  }

  &-canvas {
    position: relative;
    overflow: auto;
    height: 100%;
    contain: strict;
  }

  &-grid-sizer {
    position: absolute;
    top: 0;
    left: 0;
  }

  &-viewport {
    position: sticky;
    top: 0;
    left: 0;
    contain: strict;
    overflow: hidden;
    user-select: none;
  }

  &-view {
    position: absolute;
    top: 0;
    left: 0;
  }

  &-area {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    pointer-events: none;

    &-inner {
      pointer-events: auto;
    }

    // All this faff instead of outline on &-inner is so that
    // we can have a conditional border on the bottom when the
    // content is too short.
    &-h-borders,
    &-v-borders {
      &::after,
      &::before {
        content: '';
        display: block;
        position: absolute;
        background: var(--lfgBorderColor);
      }
    }

    &-v-borders::before {
      width: 1px;
      top: -1px;
      bottom: -1px;
      left: -1px;
    }

    &-v-borders::after {
      width: 1px;
      top: -1px;
      bottom: -1px;
      right: -1px;
    }

    &-h-borders::before {
      height: 1px;
      top: -1px;
      left: -1px;
      right: -1px;
    }

    &-h-borders::after[data-borderbottom='true'] {
      height: 1px;
      bottom: -1px;
      left: -1px;
      right: -1px;
    }
  }

  &-detail-row {
    position: absolute;
    z-index: 1;
    left: 0;
    width: 100%;

    &-inner {
      position: sticky;
      left: 0;
      width: 100%;
      height: 100%;
      outline: 1px solid var(--lfgBorderColor);
      background: var(--lfgCellBg, var(--lfgBg));
    }
  }

  &-row {
    position: absolute;
    width: 100%;
  }

  &-resizer-marker {
    position: absolute;
    top: 0;
    bottom: 0;
    z-index: 2;
    width: 1px;
    pointer-events: none;
    background-color: var(--lfgColResizeColor);
  }

  &-overlay {
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
  }

  &-loading-overlay {
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
  }
}
